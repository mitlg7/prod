drop
    database if exists work;
create
    database work;

create table category
(
    id   integer primary key GENERATED BY DEFAULT AS IDENTITY,
    type varchar(250) not null unique
);

create table sub_category
(
    id          integer primary key GENERATED BY DEFAULT AS IDENTITY,
    type        varchar(250) not null unique,
    category_id integer,
    foreign key (category_id) references category (id)
);

create table role
(
    id   integer primary key GENERATED BY DEFAULT AS IDENTITY,
    type varchar(50) not null unique
);
create table user_info
(
    id       integer primary key GENERATED BY DEFAULT AS IDENTITY,
    name     varchar(250) not null,
    lastName varchar(250),
    phone    varchar(250),
    image    varchar(512),
    birthday date         not null
);


create table users
(
    id       integer primary key GENERATED BY DEFAULT AS IDENTITY,
    login    varchar(250) not null unique,
    password varchar(250) not null,
    email    varchar(250),
    info_id  integer,
    role_id  integer,
    foreign key (role_id) references role (id),
    foreign key (info_id) references user_info (id) on delete cascade on update cascade
);


create table product

(
    id              integer primary key GENERATED BY DEFAULT AS IDENTITY,
    user_id         integer       not null,
    name            varchar(250)  not null,
    image           varchar(512)  not null,
    description     varchar(1024) not null,
    date            date,
    price           integer       not null,
    category_id     integer,
    sub_category_id integer,
    foreign key (user_id) references users (id),
    foreign key (category_id) references category (id),
    foreign key (sub_category_id) references sub_category (id)
);

create table item
(
    id          integer primary key GENERATED BY DEFAULT AS IDENTITY,
    name        varchar(250) not null,
    image       varchar(512),
    date        date,
    description varchar(4096),
    user_id     integer,
    foreign key (user_id) references users (id)
);


create table comment
(
    id      integer primary key GENERATED BY DEFAULT AS IDENTITY,
    date    date    not null,
    user_id integer not null,
    message varchar(4096),
    item_id integer,
    foreign key (user_id) references users (id),
    foreign key (item_id) references item (id)

);

insert into role (type)
values ('ADMIN');
insert into role (type)
values ('MODER');
insert into role (type)
values ('USER');

insert into users (login, password, role_id)
values ('admin', 'admin', (select id from role where type = 'ADMIN'));
insert into users (login, password, role_id)
values ('moder', 'moder', (select id from role where type = 'MODER'));
insert into users (login, password, role_id)
values ('user', 'user', (select id from role where type = 'USER'));

INSERT INTO category (type)
values ('Металл');
INSERT INTO category (type)
values ('Дерево');
INSERT INTO category (type)
values ('Камень');
INSERT INTO category (type)
values ('Пластик');


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

CREATE PROCEDURE CREATE_USER(_login varchar, _password varchar, _email varchar)
    LANGUAGE plpgsql
AS
$$
BEGIN
    INSERT INTO users(LOGIN, PASSWORD, EMAIL, ROLE_ID)
    VALUES (_login, _password, _email, (SELECT ID FROM role WHERE type = 'USER'));
    COMMIT;
end;
$$;

CREATE PROCEDURE USER_GET(in _id int)
    LANGUAGE plpgsql
AS
$$
BEGIN
    select u.id, u.login, u.password, r.type as role
    from users u
             join role r on r.id = u.role_id
    where u.id = _id;
END;
$$;


CREATE PROCEDURE REMOVE_USER(_login varchar)
    LANGUAGE plpgsql
as
$$
BEGIN
    delete from users where login = _login;
END;
$$;


CREATE PROCEDURE FIND_USER(_login varchar)
    LANGUAGE plpgsql
AS
$$
BEGIN
    SELECT u.id, u.login, u.email, r.type
    FROM users u
             join role r on u.role_id = r.id
    where u.login = _login;
END;
$$;

create procedure create_product(_user_id integer, _image character varying, _name character varying, _description character varying, _price integer, _date date)
    language plpgsql
as
$$
BEGIN
    insert into product (user_id, image, name, description, price, date)
    values (_USER_ID, _IMAGE, _NAME, _DESCRIPTION, _PRICE, _DATE);
END;
$$;



CREATE PROCEDURE remove_product(_product_id integer)
    LANGUAGE plpgsql
AS
$$
BEGIN
    delete from product where id = _product_id;
END;
$$;


CREATE PROCEDURE CREATE_ITEM(
    _NAME varchar,
    _IMAGE varchar,
    _DATE date,
    _DESCRIPTION varchar,
    _USER_ID integer
)
    LANGUAGE plpgsql
AS
$$
BEGIN
    INSERT INTO item (name, image, date, description, user_id)
    VALUES (_NAME, _IMAGE, _DATE, _DESCRIPTION, _USER_ID);
END;
$$;

create procedure remove_item(_item_id integer)
    language plpgsql
as
$$
begin
    delete
    from item
    where id = _item_id;
end;
$$;


create procedure create_comment(_USER_ID integer, _DATE date, _MESSAGE varchar, _ITEM_ID integer)
    language plpgsql
as
$$
begin
    insert into comment (date, user_id, message, item_id)
    values (_DATE, _USER_ID, _MESSAGE, _ITEM_ID);
end;
$$;

create procedure remove_comment(_comment_id integer)
    language plpgsql
as
$$
begin
    delete
    from comment
    where id = _comment_id;
end;
$$;


create procedure create_category(_type varchar)
    language plpgsql
as
$$
begin
    insert into category (type)
    values (_type);
end;
$$;

create procedure remove_category(_category_id integer)
    language plpgsql
as
$$
begin
    delete
    from comment
    where id = _category_id;
end;
$$;

CREATE OR REPLACE FUNCTION ALL_USERS()
    RETURNS SETOF users AS
$$
BEGIN
    RETURN QUERY SELECT *
                 FROM users;
END
$$ LANGUAGE plpgsql;

SELECT *
from all_users();



CREATE OR REPLACE FUNCTION ROLE_BY_TYPE(_TYPE varchar)
    RETURNS
        SETOF ROLE
AS
$$
BEGIN
    RETURN QUERY SELECT *
                 FROM role
                 where type = _type;
END
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION ROLE_BY_ID(_id bigint)
    RETURNS
        SETOF ROLE
AS
$$
BEGIN
    RETURN QUERY SELECT *
                 FROM role
                 where id = _id;
END
$$ LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION USER_BY_LOGIN(_login varchar)
    RETURNS
        SETOF users
AS
$$
BEGIN
    RETURN QUERY SELECT *
                 FROM users
                 where login = _login;
END
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION USER_BY_ID(_id bigint)
    RETURNS
        SETOF users
AS
$$
BEGIN
    RETURN QUERY SELECT *
                 FROM users
                 where id = _id;
END
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION USER_INFO_BY_ID(_id bigint)
    RETURNS
        SETOF user_info
AS
$$
BEGIN
    RETURN QUERY SELECT *
                 FROM user_info
                 where id = _id;
END
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION PRODUCT_BY_ID(_id bigint)
    RETURNS
        SETOF product
AS
$$
BEGIN
    RETURN QUERY SELECT *
                 FROM product
                 where id = _id;
END
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION ITEM_BY_ID(_id bigint)
    RETURNS
        SETOF item
AS
$$
BEGIN
    RETURN QUERY SELECT *
                 FROM item
                 where id = _id;
END
$$ LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION COMMENTS_BY_USER_ID(_id bigint)
    RETURNS
        SETOF comment
AS
$$
BEGIN
    RETURN QUERY SELECT *
                 FROM comment
                 where user_id = _id;
END
$$ LANGUAGE PLPGSQL;


CREATE OR REPLACE function CREATE_USER_INFO(_name varchar, _lastname varchar, _phone varchar, _image varchar,
                                            _birthday date)
    returns setof bigint
AS
$$
BEGIN
    insert into user_info (name, lastName, phone, image, birthday) VALUES (_name, _lastname, _phone, _image, _birthday);
    return query select currval('user_info_id_seq');
END
$$ LANGUAGE PLPGSQL;



CREATE OR REPLACE PROCEDURE ADD_USER_INFO_TO_USER(_login varchar, _info_id BIGINT)
AS
$$
BEGIN
    UPDATE users
    SET info_id = _info_id
    WHERE login = _login;
END
$$ LANGUAGE plpgsql;


create function user_by_id(_id bigint) returns SETOF users
    language plpgsql
as
$$
BEGIN
    RETURN QUERY SELECT *
                 FROM users
                 where id = _id;
END
$$;

create function user_by_login(_login character varying) returns SETOF users
    language plpgsql
as
$$
BEGIN
    RETURN QUERY SELECT *
                 FROM users
                 where login = _login;
END
$$;



select *
from CREATE_USER_INFO('aweq', 'qwe', 'asd', '6974118-dda0-4e08-9417-7b0bcf7e2.jpg', '2021-11-03') as "id";


CREATE OR REPLACE FUNCTION ALL_PRODUCTS()
    RETURNS SETOF product AS
$$
BEGIN
    RETURN QUERY SELECT *
                 FROM product;
END
$$ LANGUAGE plpgsql;